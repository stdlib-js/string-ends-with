{"version":3,"file":"index.mjs","sources":["../lib/ends_with.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Test if a string ends with the characters of another string.\n*\n* @param {string} str - input string\n* @param {string} search - search string\n* @param {integer} [len=str.length] - substring length\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a string\n* @throws {TypeError} third argument must be an integer\n* @returns {boolean} boolean indicating if the input string ends with the search string\n*\n* @example\n* var bool = endsWith( 'Remember the story I used to tell you when you were a boy?', 'boy?' );\n* // returns true\n*\n* @example\n* var bool = endsWith( 'Remember the story I used to tell you when you were a boy?', 'Boy?' );\n* // returns false\n*\n* @example\n* var bool = endsWith( 'To be, or not to be, that is the question.', 'to be' );\n* // returns false\n*\n* @example\n* var bool = endsWith( 'To be, or not to be, that is the question.', 'to be', 19 );\n* // returns true\n*\n* @example\n* var bool = endsWith( 'To be, or not to be, that is the question.', 'to be', -23 );\n* // returns true\n*/\nfunction endsWith( str, search, len ) {\n\tvar idx;\n\tvar i;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tif ( !isString( search ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a string. Value: `%s`.', search ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isInteger( len ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', len ) );\n\t\t}\n\t\tif ( len === 0 ) {\n\t\t\treturn ( search.length === 0 );\n\t\t}\n\t\tif ( len < 0 ) {\n\t\t\tidx = str.length + len;\n\t\t} else {\n\t\t\tidx = len;\n\t\t}\n\t} else {\n\t\tidx = str.length;\n\t}\n\tif ( search.length === 0 ) {\n\t\t// Based on the premise that every string can be \"surrounded\" by empty strings (e.g., \"\" + \"a\" + \"\" + \"b\" + \"\" === \"ab\"):\n\t\treturn true;\n\t}\n\tidx -= search.length;\n\tif ( idx < 0 ) {\n\t\treturn false;\n\t}\n\tfor ( i = 0; i < search.length; i++) {\n\t\tif ( str.charCodeAt( idx + i ) !== search.charCodeAt( i ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\n\nmodule.exports = endsWith;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a string ends with the characters of another string.\n*\n* @module @stdlib/string-ends-with\n*\n* @example\n* var endsWith = require( '@stdlib/string-ends-with' );\n*\n* var str = 'Fair is foul, and foul is fair, hover through fog and filthy air';\n*\n* var bool = endsWith( str, 'air' );\n* // returns true\n*\n* bool = endsWith( str, 'fair' );\n* // returns false\n*\n* bool = endsWith( str, 'fair', 30 );\n* // returns true\n*\n* bool = endsWith( str, 'fair', -34 );\n* // returns true\n*/\n\n// MODULES //\n\nvar endsWith = require( './ends_with.js' );\n\n\n// EXPORTS //\n\nmodule.exports = endsWith;\n"],"names":["isInteger","require$$0","isPrimitive","isString","require$$1","format","require$$2","lib","str","search","len","idx","i","TypeError","arguments","length","charCodeAt"],"mappings":";;0PAsBA,IAAIA,EAAYC,EAAuCC,YACnDC,EAAWC,EAAsCF,YACjDG,EAASC,EA+Eb,ICrDAC,EDUA,SAAmBC,EAAKC,EAAQC,GAC/B,IAAIC,EACAC,EACJ,IAAMT,EAAUK,GACf,MAAM,IAAIK,UAAWR,EAAQ,kEAAmEG,IAEjG,IAAML,EAAUM,GACf,MAAM,IAAII,UAAWR,EAAQ,mEAAoEI,IAElG,GAAKK,UAAUC,OAAS,EAAI,CAC3B,IAAMf,EAAWU,GAChB,MAAM,IAAIG,UAAWR,EAAQ,oEAAqEK,IAEnG,GAAa,IAARA,EACJ,OAA2B,IAAlBD,EAAOM,OAGhBJ,EADID,EAAM,EACJF,EAAIO,OAASL,EAEbA,OAGPC,EAAMH,EAAIO,OAEX,GAAuB,IAAlBN,EAAOM,OAEX,OAAO,EAGR,IADAJ,GAAOF,EAAOM,QACH,EACV,OAAO,EAER,IAAMH,EAAI,EAAGA,EAAIH,EAAOM,OAAQH,IAC/B,GAAKJ,EAAIQ,WAAYL,EAAMC,KAAQH,EAAOO,WAAYJ,GACrD,OAAO,EAGT,OAAO"}